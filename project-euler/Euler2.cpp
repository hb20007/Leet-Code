//Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
//find the sum of the even - valued terms.

#include <iostream>
//#include <cmath>
using namespace std;

//after looking at the solution I realized that u are supposed to generate the 2nd digit as well... ie start with x=1, y=1 and fibonacci = x+y...
//also they do it this way: fibonacci = x+y, x=y, y = fibonacci.... everything gets an upgrade... my way is cooler though :P

// There is an alt solution. It is to look at the even fib nos: 2, 8, 34, 144. Notice they are a recursive sequence themselves
// (34) = 4*(8) + 2. 144 = 4*(34) + 8  etc! We can prove this is correct by proving that for the fibonacci sequence, each term (n) is = 4*(n-3) + (n-6). To prove this, start with the basic definition f(n) = f(n-1) + f(n-2)... then write an expression for f(n-1) = etc.. and move on

int main()
{
	long unsigned int x = 1, y = 2, sum = 2, ctr = 0;  
	for (long unsigned int fibonacci = 3; fibonacci < 4000000; fibonacci = x + y)  //instead of 4000000, it's better to write 4e6
	{
		if (fibonacci % 2 == 0)
		sum += fibonacci;
		if (ctr % 2 == 0)   //I was also thinking not to use the ctr but use the pattern in the Fibonacci numbers, ie.  at 3 onwards, it's always o,o,e ... ie 2 odd numbers then their sum is even....odd, odd even.. but i don't know how that would work if it could
			x = fibonacci;  
		else
			y = fibonacci;
		ctr++;
	}
	cout << sum <<endl;
	system("pause");
	return 0;
}
