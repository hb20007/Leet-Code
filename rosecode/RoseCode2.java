//Fibonacci terms are generated by adding previous two terms. 
//So by starting with 1,1 the sequence would be: 1,1,2,3,5,8,13,21,.. 
//and so on. 
//
//Find the first Fibonacci term that exceeds 100 in its digital sum.

import java.math.BigInteger;

public class RoseCode2 {
	
	private static int targetSumDigits = 100;
	
	private static int sumDigits(BigInteger fib) {
		int sum = 0;
		while (fib.compareTo(BigInteger.ZERO) != 0) {
			sum += fib.mod(BigInteger.TEN).intValue();
			fib = fib.divide(BigInteger.TEN);
		}
		return sum;
	}
	
	private static BigInteger nthFibonacciNumber(final int n) {
		BigInteger nthFib = BigInteger.ONE, nMinusOnethFib = BigInteger.ONE, temp;
		for (int i = 2; i < n; i++) { // First and second Fibonacci nums are taken to be = 1
			temp = nthFib;
			nthFib = nthFib.add(nMinusOnethFib);
			nMinusOnethFib = temp;
		}
		return nthFib;
	}
	
	public static void main(String[] args) {
		int i = 1;
		for (; sumDigits(nthFibonacciNumber(i)) <= targetSumDigits ; i++);
		System.out.println(nthFibonacciNumber(i));
	}
}
